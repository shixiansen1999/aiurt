<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aiurt.modules.system.mapper.SysAnnouncementMapper">

	<resultMap id="SysAnnouncement" type="com.aiurt.modules.system.entity.SysAnnouncement" >
		<result column="id" property="id" jdbcType="VARCHAR"/>
		<result column="titile" property="titile" jdbcType="VARCHAR"/>
		<result column="msg_content" property="msgContent" jdbcType="VARCHAR"/>
		<result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
		<result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
		<result column="sender" property="sender" jdbcType="VARCHAR"/>
		<result column="priority" property="priority" jdbcType="VARCHAR"/>
		<result column="msg_category" property="msgCategory" jdbcType="VARCHAR"/>
		<result column="msg_type" property="msgType" jdbcType="VARCHAR"/>
		<result column="send_status" property="sendStatus" jdbcType="VARCHAR"/>
		<result column="send_time" property="sendTime" jdbcType="VARCHAR"/>
		<result column="cancel_time" property="cancelTime" jdbcType="VARCHAR"/>
		<result column="del_flag" property="delFlag" jdbcType="VARCHAR"/>
		<result column="create_by" property="createBy" jdbcType="VARCHAR"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="update_by" property="updateBy" jdbcType="VARCHAR"/>
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
		<result column="user_ids" property="userIds" jdbcType="VARCHAR"/>
		<result column="bus_type" property="busType" jdbcType="VARCHAR"/>
		<result column="bus_id" property="busId" jdbcType="VARCHAR"/>
		<result column="open_type" property="openType" jdbcType="VARCHAR"/>
		<result column="open_page" property="openPage" jdbcType="VARCHAR"/>
	</resultMap>


	<select id="querySysCementListByUserId" parameterType="String"  resultMap="SysAnnouncement">
	   select * from sys_announcement
	   where send_status = '1'
	   and del_flag = '0'
	   <if test="msgCategory.size()>0 and msgCategory!=null">
		   and msg_category in
		   <foreach collection="msgCategory" open="(" close=")" separator="," item="id">
			   #{id}
		   </foreach>
	   </if>
	   and id IN ( select annt_id from sys_announcement_send where user_id = #{userId} and read_flag = '0')
	   order by create_time DESC
	</select>

	<select id="queryAnnouncement" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysAnnouncementSendDTO">
      select sa.*,sas.read_flag as readFlag
      from sys_announcement sa
      left join sys_announcement_send sas on sas.annt_id = sa.id
      <where>
               sa.del_flag = 0
		  <if test="userId!=null and userId!=''">
                and sas.user_id = #{userId}
		  </if>
	  </where>
	</select>

	<select id="queryAnnouncementByNull" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysAnnouncementSendDTO">
		select sa.* ,sas.read_flag as readFlag
		from sys_announcement sa
		left join sys_announcement_send sas on sas.annt_id = sa.id
		<where>
			 sa.del_flag = 0
			<if test="userId!=null and userId!=''">
				and sas.user_id = #{userId}
			</if>
            and isNull(sa.bus_type)
		</where>
	</select>

	<select id="queryTodoList" parameterType="Date" resultType="com.aiurt.modules.todo.entity.SysTodoList">
		select stl.*
		from sys_todo_list stl
		<where>
			<if test="userName!=null and userName!=''">
			 find_in_set(#{userName},stl.current_user_name)
			</if>
		</where>
	</select>

	<select id="queryAnnouncementInfo" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysMessageInfoDTO">
		select
		(@i:=@i+1) as seq,e.*
		from
		(select
		sa.id as id,
		sa.titile as title,
		sa.msg_content as msgContent,
		sa.create_time as intervalTime,
		sa.update_time as receiveTime,
		sa.bus_id as businessKey,
		sa.msg_category as msgCategory,
		sa.msg_abstract as msgAbstract,
		sa.publishing_content as publishingContent,
		sa.bus_type as taskType,
		sa.process_name as processName,
		sa.process_code as processCode,
		sas.read_flag as readFlag,
		sa.task_id as taskId,
		sa.process_definition_key as processDefinitionKey,
		sa.process_instance_id as processInstanceId
		from sys_announcement sa
		left join sys_announcement_send sas on sas.annt_id = sa.id
		<where>
			 sa.del_flag = 0
			<if test="userId!=null and userId!=''">
				and sas.user_id = #{userId}
			</if>
			<if test="busTypeList!=null and busTypeList.size()!=0">

				and (
				(sa.titile is not null and sa.bus_type in
				<foreach collection="busTypeList" open="(" close=")" item="item" separator=",">
						#{item}
					</foreach>
				) or
				sa.process_code in
				<foreach collection="busTypeList" open="(" close=")" item="item" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="busTypeList == null or busTypeList.size() == 0">
				and isNull(sa.bus_type)
			</if>
			<if test="keyWord!=null and keyWord!=''">
				and (
				sa.msg_content LIKE concat('%',#{keyWord},'%')
				or sa.titile LIKE concat('%',#{keyWord},'%')
				or sa.msg_abstract LIKE concat('%',#{keyWord},'%')
				or sa.publishing_content LIKE concat('%',#{keyWord},'%')
				)
			</if>
			<if test="msgCategory!=null and msgCategory!=''">
				and sa.msg_category =#{msgCategory}
			</if>
		</where>
		order by sa.create_time desc) e,(SELECT @i:=0) b
	</select>


	<select id="queryAllAnnouncement" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysMessageInfoDTO">
		select
		(@i:=@i+1) as seq,e.*
		from
		(select
		sa.id as id,
		sa.titile as title,
		sa.msg_content as msgContent,
		sa.create_time as intervalTime,
		sa.update_time as receiveTime,
		sa.bus_id as businessKey,
		sa.msg_category as msgCategory,
		sa.msg_abstract as msgAbstract,
		sa.publishing_content as publishingContent,
		sa.bus_type as taskType,
		sas.read_flag as readFlag
		from sys_announcement sa
		left join sys_announcement_send sas on sas.annt_id = sa.id
		<where>
			sa.del_flag = 0
			<if test="userId!=null and userId!=''">
				and sas.user_id = #{userId}
			</if>
			<if test="busTypeList!=null and busTypeList.size()!=0">

				and (
				(sa.titile is not null and sa.bus_type in
				<foreach collection="busTypeList" open="(" close=")" item="item" separator=",">
					#{item}
				</foreach>
				) or
				sa.process_code in
				<foreach collection="busTypeList" open="(" close=")" item="item" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="busTypeList ==null or busTypeList.size() == 0">
				and isNull(sa.bus_type)
			</if>
			<if test="keyWord!=null and keyWord!=''">
				and (
				sa.msg_content LIKE concat('%',#{keyWord},'%')
				or sa.titile LIKE concat('%',#{keyWord},'%')
				or sa.msg_abstract LIKE concat('%',#{keyWord},'%')
				or sa.publishing_content LIKE concat('%',#{keyWord},'%')
				)
			</if>
			<if test="msgCategory!=null and msgCategory!=''">
				and sa.msg_category =#{msgCategory}
			</if>
		</where>
		order by sa.create_time desc) e,(SELECT @i:=0) b
	</select>


	<select id="queryTodoListInfo" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysMessageInfoDTO">
		select
		@i:=@i+1 as seq ,
		stl.id as id,
		stl.msg_content as msgContent ,
		stl.title as title,
		stl.create_time as intervalTime,
		stl.update_time as receiveTime,
		stl.msg_abstract as msgAbstract,
		stl.publishing_content as publishingContent,
		stl.task_id as taskId,
		stl.task_type as taskType,
		stl.business_key as businessKey,
		stl.business_type as businesstype,
		stl.process_definition_key as processDefinitionKey,
		stl.process_instance_id as processInstanceId,
		stl.url as url,
		stl.app_url as appUrl,
		stl.process_name as processName,
		stl.process_code as processCode,
		stl.todo_type as todoType
		from sys_todo_list stl,(SELECT @i:=0) b
		<where>
			<if test="userName!=null and userName!=''">
			 find_in_set(#{userName},stl.current_user_name)
			</if>
			<if test="keyWord!=null and keyWord!=''">
				and
				(stl.msg_content LIKE concat(concat('%',#{keyWord}),'%')
				or stl.title LIKE concat('%',#{keyWord},'%')
				or stl.msg_abstract LIKE concat('%',#{keyWord},'%')
				or stl.publishing_content LIKE concat('%',#{keyWord},'%')
				)
			</if>
			<if test="todoType!=null and todoType!=''">
				and stl.todo_type = #{todoType}
			</if>
			<if test="busTypeList!=null and busTypeList.size()>0 ">
				and (
					(stl.title is not null and stl.task_type in
						<foreach collection="busTypeList" separator="," item="item" close=")" open="(" >
							#{item}
						</foreach>
					)
					or stl.process_code in
					<foreach collection="busTypeList" separator="," item="item" close=")" open="(" >
						#{item}
					</foreach>
				)
			</if>
		</where>
		order by stl.create_time desc
	</select>

	<select id="queryAllTodoList" parameterType="Date" resultType="com.aiurt.modules.system.dto.SysMessageInfoDTO">
		select
		@i:=@i+1 as seq ,
		stl.id as id,
		stl.msg_content as msgContent ,
		stl.title as title,
		stl.create_time as intervalTime,
		stl.update_time as receiveTime,
		stl.msg_abstract as msgAbstract,
		stl.publishing_content as publishingContent,
		stl.task_id as taskId,
		stl.task_type as taskType,
		stl.business_key as businessKey,
		stl.url as url,
		stl.app_url as appUrl,
		stl.todo_type as todoType
		from sys_todo_list stl,(SELECT @i:=0) b
		<where>
			<if test="userName!=null and userName!=''">
				find_in_set(#{userName},stl.current_user_name)
			</if>
			<if test="keyWord!=null and keyWord!=''">
				and stl.msg_content LIKE concat(concat('%',#{keyWord}),'%')
			</if>
			<if test="todoType!=null and todoType!=''">
				and stl.todo_type = #{todoType}
			</if>
			<if test="busTypeList!=null and busTypeList.size()>0 ">
				and (
				(stl.title is not null and stl.task_type in
				<foreach collection="busTypeList" separator="," item="item" close=")" open="(" >
					#{item}
				</foreach>
				)
				or stl.process_code in
				<foreach collection="busTypeList" separator="," item="item" close=")" open="(" >
					#{item}
				</foreach>
				)
			</if>
		</where>
		order by stl.create_time desc
	</select>

	<select id="queryTypeCount" resultType="com.aiurt.modules.system.dto.SysAnnouncementTypeCountDTO">
		SELECT
				t2.bus_type,
				t2.titile,
				COUNT(t1.id) as count,
				COUNT(IF(t1.read_flag='0',1,NULL)) as unread_count
		FROM
				sys_announcement_send t1
						LEFT JOIN sys_announcement t2 ON t1.annt_id = t2.id
		WHERE
				t2.titile IS NOT NULL
		  and t2.bus_type != 'bpm' and t2.titile is not null and t2.bus_type is not NULL and t1.user_id = #{userId}
		  and t2.del_flag = 0
		GROUP BY  t2.bus_type

		UNION

		SELECT
				t2.process_code bus_type,
				t2.titile,
				COUNT(t1.id) as count,
				COUNT(IF(t1.read_flag='0',1,NULL)) as unread_count
		FROM
				sys_announcement_send t1
						LEFT JOIN sys_announcement t2 ON t1.annt_id = t2.id
		WHERE
				t2.titile IS NOT NULL
		  and t2.bus_type = 'bpm' and t2.process_code is not NULL and t1.user_id = #{userId}
		  and t2.del_flag = 0
		GROUP BY  t2.process_code

	</select>

	<select id="queryLast" resultType="com.aiurt.modules.system.entity.SysAnnouncementSend">
		select sas.*,if(sa.msg_abstract !=null,sa.msg_abstract,sa.titile) as titleContent,
		sa.create_time as createTime,
		sa.update_time as updateTime
		from sys_announcement_send sas
		left join sys_announcement sa on sa.id = sas.annt_id
		where sas.user_id = #{userId}
		<choose>
			<when test="list != null and list.size() != 0">
				and sas.annt_id in (
				select id from sys_announcement where 1=1 and del_flag = 0
				and (bus_type in
				<foreach collection="list" separator="," open="(" close=")" item="item">
					#{item}
				</foreach>
				or
				process_code in
				<foreach collection="list" separator="," open="(" close=")" item="item">
					#{item}
				</foreach>
				)
				)
			</when>
			<otherwise>
				and sas.annt_id in (
				select id from sys_announcement where 1=1 and del_flag = 0
				and isNull(bus_type)
				)
			</otherwise>
		</choose>
		<if test="msgCategory != null and msgCategory != ''">
			and sas.annt_id in (select id from sys_announcement where msg_category = #{msgCategory} and del_flag = 0 )
		</if>
		order by if(sa.update_time != null,sa.update_time,sa.create_time) desc limit 1
	</select>

	<select id="queryBNullTypeCount" resultType="com.aiurt.modules.system.dto.SysAnnouncementTypeCountDTO">
		SELECT
				t2.msg_category bus_type,
				t2.titile,
				COUNT(t1.id) as count,
				COUNT(IF(t1.read_flag='0',1,NULL)) as unread_count
		FROM
				sys_announcement_send t1
						LEFT JOIN sys_announcement t2 ON t1.annt_id = t2.id
		WHERE
				t2.titile IS NOT NULL
		  and isNull(t2.bus_type) and t1.user_id =  #{userId}
		  and t2.del_flag = 0
	  GROUP BY  t2.msg_category
	</select>
</mapper>
