@startuml



interface UserFilter<T extends UserContext> {
    +doFilter(context: T, chain: UserFilterChain): void
}

interface UserFilterChain<T extends UserContext> {
    +handle(context: T): void
    +fireNext(ctx: T): void
}

class DefaultFilterChain<T extends UserContext> {
    - next UserFilterChain<T>
    - filter UserFilter<T>
}

interface UserContext {
    +getFilterSelector(): FilterSelector
    +continueChain(): boolean
}

interface FilterSelector {
    +matchFilter(currentFilterName: String): boolean
    +getFilterNames(): List<String>
}
DefaultFilterChain --|> UserFilterChain
DefaultFilterChain --|> UserContext
UserFilter --|> UserFilterChain
UserFilterChain --|> UserContext
UserContext --|> FilterSelector
@enduml
